openapi: 3.1.0
info:
  version: 1.0.0
  title: AquaTrack app
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: This is a documentation of AquaTrack app
tags:

  - name: Auth
    description: Auth operations.
  - name: User
    description: Operations about users.
  - name: Water
    description: Operations about water consumption.
servers:
  - url: http://localhost:3003
  - url: https://aqua-app-teamwork.onrender.com
paths:
  /auth/register:
    post:
      $ref: '../swagger/paths/auth/register.yaml'
  /auth/login:
    post:
      $ref: '../swagger/paths/auth/login.yaml'
  /auth/logout:
    post:
      $ref: '../swagger/paths/auth/logout.yaml'
  /auth/refresh:
    post:
      $ref: '../swagger/paths/auth/refresh.yaml'
  /user:
    get:
      $ref: '../swagger/paths/user/get.yaml'
      security:
        - bearerAuth: []
  /user/update:
    patch:
      $ref: '../swagger/paths/user/update.yaml'
      security:
        - bearerAuth: []
  /water/add-water:
    post:
      $ref: '../swagger/paths/water/add-water.yaml'
      security:
        - bearerAuth: []
  /water/delete-water/{id}:
    delete:
      $ref: '../swagger/paths/water/{waterId}/delete-water.yaml'
      security:
        - bearerAuth: []
  /water/update-water/{id}:
    patch:
      $ref: '../swagger/paths/water/{waterId}/update-water.yaml'
      security:
        - bearerAuth: []
  /water/daily-water:
    get:
      $ref: '../swagger/paths/water/daily-water.yaml'
      security:
        - bearerAuth: []
  /water/monthly-water:
    get:
      $ref: '../swagger/paths/water/monthly-water.yaml'
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user:
      type: object
      required:
        - email
        - password
      properties:
        email:
          description: "User's email address"
          type: string
          format: email
          example: "alexboo@ukr.net"
        password:
          description: "User's password"
          type: string
          example: "password123"
        name:
          description: "User's name"
          type: string
          example: "Alex Boo"
        gender:
          description: "User's gender"
          type: string
          enum:
            - male
            - female
          example: "female"
        weight:
          description: "User's weight in kilograms"
          type: number
          example: 75
        dailyTimeActivity:
          description: "User's daily time activity in minutes"
          type: number
          example: 45
        dailyNorma:
          description: "User's daily water intake norm in liters"
          type: number
          example: 1.8
        avatar:
          description: "URL to the user's avatar image"
          type: string
          format: uri
          example: "https://res.cloudinary.com/dztvd7emk/image/upload/v1722795504/xxkv5fjuoqma9hsn7qbc.jpg"
    water:
      type: object
      required:
        - date
        - amount
        - userId
      properties:
        date:
          description: "Date when the water entry was created"
          type: string
          format: date-time
          example: '2024-08-05T12:00:00Z'
        amount:
          description: "Amount of water consumed"
          type: number
          example: 500
        userId:
          description: "ID of the user associated with this water entry"
          type: string
          format: uuid
          example: '60d0fe4f5311236168a109ca'
  responses:
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 401
              message:
                type: string
                example: Unauthorized
